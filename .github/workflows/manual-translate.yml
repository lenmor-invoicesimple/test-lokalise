name: Manual Translation Trigger

on:
  workflow_dispatch:
    inputs:
      target_languages:
        description: 'Languages to translate (comma-separated, e.g. es,fr,de)'
        required: true
        default: 'es,fr'
      translation_provider:
        description: 'Translation provider'
        required: false
        default: 'google'
        type: choice
        options:
          - google
          - deepl
          - microsoft

jobs:
  trigger-translation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Install curl and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Get untranslated keys
        id: get-keys
        run: |
          echo "=== Getting untranslated keys ==="
          
          # Get all keys that are untranslated
          response=$(curl -s -X GET \
            "https://api.lokalise.com/api2/projects/${{ secrets.LOKALISE_PROJECT_ID }}/keys?limit=5000" \
            -H "X-Api-Token: ${{ secrets.LOKALISE_API_TOKEN }}")
          
          echo "Response: $response"
          
          # Extract key IDs
          key_ids=$(echo "$response" | jq -r '.keys[].key_id' | head -20 | tr '\n' ',' | sed 's/,$//')
          echo "Found key IDs: $key_ids"
          echo "key_ids=$key_ids" >> $GITHUB_OUTPUT

      - name: Trigger Translation
        if: steps.get-keys.outputs.key_ids != ''
        run: |
          echo "=== Triggering translation ==="
          
          IFS=',' read -ra LANGS <<< "${{ github.event.inputs.target_languages }}"
          IFS=',' read -ra KEYS <<< "${{ steps.get-keys.outputs.key_ids }}"
          
          for lang in "${LANGS[@]}"; do
            echo "Translating to language: $lang"
            
            # Use the correct bulk translation API endpoint
            key_ids_json=$(printf '%s\n' "${KEYS[@]}" | jq -R . | jq -s .)
            
            echo "Triggering bulk auto-translation for $lang"
            response=$(curl -s -X POST \
              "https://api.lokalise.com/api2/projects/${{ secrets.LOKALISE_PROJECT_ID }}/translations/auto-translate" \
              -H "X-Api-Token: ${{ secrets.LOKALISE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"key_ids\": $key_ids_json,
                \"target_lang_iso\": \"$lang\",
                \"provider\": \"${{ github.event.inputs.translation_provider }}\"
              }")
            
            echo "Bulk translation response for $lang: $response"
            sleep 2  # Rate limiting
          done

      - name: Alternative - Bulk Translation via CLI
        if: steps.get-keys.outputs.key_ids != ''
        run: |
          echo "=== Using Lokalise CLI for auto-translation ==="
          
          # Install Lokalise CLI
          curl -sfL https://raw.githubusercontent.com/lokalise/lokalise-cli-2-go/master/install.sh | sh
          
          IFS=',' read -ra LANGS <<< "${{ github.event.inputs.target_languages }}"
          IFS=',' read -ra KEYS <<< "${{ steps.get-keys.outputs.key_ids }}"
          
          for lang in "${LANGS[@]}"; do
            echo "Auto-translating keys to $lang using CLI"
            
            # Create a file with key IDs for bulk processing
            printf '%s\n' "${KEYS[@]}" > key_ids.txt
            
            # Use CLI to trigger auto-translation (if available)
            echo "Available CLI commands:"
            ./bin/lokalise2 --help | grep -i translate || echo "No direct translate command found"
            
            echo "Trying alternative approach - updating translations to trigger automation"
            for key_id in "${KEYS[@]}"; do
              if [ ! -z "$key_id" ]; then
                echo "Processing key $key_id for language $lang"
                
                # Try to get the base language translation first
                base_translation=$(curl -s -X GET \
                  "https://api.lokalise.com/api2/projects/${{ secrets.LOKALISE_PROJECT_ID }}/keys/$key_id" \
                  -H "X-Api-Token: ${{ secrets.LOKALISE_API_TOKEN }}" | \
                  jq -r '.key.translations[]? | select(.language_iso == "en") | .translation // empty')
                
                if [ ! -z "$base_translation" ] && [ "$base_translation" != "null" ]; then
                  echo "Found base translation for key $key_id: $base_translation"
                  
                  # Create or update translation to trigger automation
                  response=$(curl -s -X PUT \
                    "https://api.lokalise.com/api2/projects/${{ secrets.LOKALISE_PROJECT_ID }}/translations" \
                    -H "X-Api-Token: ${{ secrets.LOKALISE_API_TOKEN }}" \
                    -H "Content-Type: application/json" \
                    -d "{
                      \"translations\": [
                        {
                          \"key_id\": $key_id,
                          \"language_iso\": \"$lang\",
                          \"translation\": \"$base_translation\",
                          \"is_fuzzy\": true
                        }
                      ]
                    }")
                  
                  echo "Update response for key $key_id: $response"
                  sleep 1
                fi
              fi
            done
          done
