name: Full Auto-Translation Workflow

on:
  workflow_dispatch:
    inputs:
      target_languages:
        description: 'Languages to translate (comma-separated, e.g. es,fr,de)'
        required: true
        default: 'es,fr'
      wait_time:
        description: 'Minutes to wait for translation (default: 5)'
        required: false
        default: '5'
  push:
    branches:
      - main  # Auto-trigger when pushing to main
    paths:
      - 'src/locales/en*.json'  # Only when English source files change
  pull_request:
    types: [closed]
    branches:
      - main  # Auto-trigger when PR is merged to main
    paths:
      - 'src/locales/en*.json'

jobs:
  translate-and-pull:
    runs-on: ubuntu-latest
    # Only run if it's a push to main OR a merged PR (not just closed)
    if: github.ref == 'refs/heads/main' || (github.event.pull_request.merged == true)
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set default values for automatic runs
        id: set-defaults
        run: |
          # Use input values if manually triggered, otherwise use defaults
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "target_languages=${{ github.event.inputs.target_languages }}" >> $GITHUB_OUTPUT
            echo "wait_time=${{ github.event.inputs.wait_time }}" >> $GITHUB_OUTPUT
          else
            echo "target_languages=es,fr" >> $GITHUB_OUTPUT
            echo "wait_time=5" >> $GITHUB_OUTPUT
          fi
          
          echo "Trigger: ${{ github.event_name }}"
          echo "Languages: $(echo '${{ github.event.inputs.target_languages }}' | sed 's/^$/es,fr/')"
          echo "Wait time: $(echo '${{ github.event.inputs.wait_time }}' | sed 's/^$/5/') minutes"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq

      - name: Step 0 - Push source files to Lokalise (optional)
        run: |
          echo "=== Pushing latest source files to Lokalise ==="
          
          # Install Lokalise CLI
          curl -sSL https://raw.githubusercontent.com/lokalise/lokalise-cli-2-go/master/install.sh | sh
          
          # Check if English source file exists
          if [ -f "src/locales/en.json" ]; then
            echo "Found en.json, uploading to Lokalise..."
            
            ./bin/lokalise2 file upload \
              --token ${{ secrets.LOKALISE_API_TOKEN }} \
              --project-id ${{ secrets.LOKALISE_PROJECT_ID }} \
              --file "src/locales/en.json" \
              --lang-iso en \
              --replace-modified \
              --include-path \
              --distinguish-by-file
            
            echo "✅ English source file uploaded to Lokalise"
          else
            echo "⚠️ No en.json found in src/locales/"
          fi
          
          # Also check for en-US.json if it exists
          if [ -f "src/locales/en-US.json" ]; then
            echo "Found en-US.json, uploading to Lokalise..."
            
            ./bin/lokalise2 file upload \
              --token ${{ secrets.LOKALISE_API_TOKEN }} \
              --project-id ${{ secrets.LOKALISE_PROJECT_ID }} \
              --file "src/locales/en-US.json" \
              --lang-iso en-US \
              --replace-modified \
              --include-path \
              --distinguish-by-file
            
            echo "✅ English (US) source file uploaded to Lokalise"
          fi

      - name: Step 1 - Ensure target languages exist
        run: |
          echo "=== Adding target languages to project ==="
          
          IFS=',' read -ra LANGS <<< "${{ steps.set-defaults.outputs.target_languages }}"
          
          for lang in "${LANGS[@]}"; do
            echo "Checking/adding language: $lang"
            
            # Add language (will ignore if it already exists)
            response=$(curl -s -X POST \
              "https://api.lokalise.com/api2/projects/${{ secrets.LOKALISE_PROJECT_ID }}/languages" \
              -H "X-Api-Token: ${{ secrets.LOKALISE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"languages\": [{\"lang_iso\": \"$lang\"}]}")
            
            echo "Response for $lang: $response"
          done

      - name: Step 2 - Trigger automation by creating placeholder translations
        run: |
          echo "=== Triggering Lokalise automation ==="
          
          # Get all keys with English translations
          keys_response=$(curl -s -X GET \
            "https://api.lokalise.com/api2/projects/${{ secrets.LOKALISE_PROJECT_ID }}/keys?include_translations=1&limit=5000" \
            -H "X-Api-Token: ${{ secrets.LOKALISE_API_TOKEN }}")
          
          echo "$keys_response" | jq -r '.keys[] | select(.translations[]? | select(.language_iso == "en")) | .key_id' > english_keys.txt
          
          IFS=',' read -ra LANGS <<< "${{ steps.set-defaults.outputs.target_languages }}"
          
          for lang in "${LANGS[@]}"; do
            echo "Creating placeholder translations for $lang"
            
            while IFS= read -r key_id; do
              if [ ! -z "$key_id" ]; then
                # Create empty translation to trigger automation
                curl -s -X POST \
                  "https://api.lokalise.com/api2/projects/${{ secrets.LOKALISE_PROJECT_ID }}/translations" \
                  -H "X-Api-Token: ${{ secrets.LOKALISE_API_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  -d "{
                    \"translations\": [
                      {
                        \"key_id\": $key_id,
                        \"language_iso\": \"$lang\",
                        \"translation\": \"\",
                        \"is_fuzzy\": true
                      }
                    ]
                  }" > /dev/null 2>&1
                
                sleep 0.2  # Rate limiting
              fi
            done < english_keys.txt
          done

      - name: Step 3 - Wait for Lokalise automation to complete
        run: |
          wait_minutes=${{ steps.set-defaults.outputs.wait_time }}
          echo "=== Waiting $wait_minutes minutes for Lokalise automation ==="
          sleep $((wait_minutes * 60))

      - name: Step 4 - Verify translations were created
        run: |
          echo "=== Checking translation progress ==="
          
          IFS=',' read -ra LANGS <<< "${{ steps.set-defaults.outputs.target_languages }}"
          
          for lang in "${LANGS[@]}"; do
            echo "Checking $lang translations:"
            
            # Count total vs translated (including fuzzy)
            total=$(curl -s -X GET \
              "https://api.lokalise.com/api2/projects/${{ secrets.LOKALISE_PROJECT_ID }}/translations?filter_lang_iso=$lang&limit=1000" \
              -H "X-Api-Token: ${{ secrets.LOKALISE_API_TOKEN }}" | \
              jq -r '.translations | length')
            
            translated=$(curl -s -X GET \
              "https://api.lokalise.com/api2/projects/${{ secrets.LOKALISE_PROJECT_ID }}/translations?filter_lang_iso=$lang&filter_is_fuzzy=false&limit=1000" \
              -H "X-Api-Token: ${{ secrets.LOKALISE_API_TOKEN }}" | \
              jq -r '.translations | length')
            
            # Also count fuzzy translations (auto-translated)
            fuzzy=$(curl -s -X GET \
              "https://api.lokalise.com/api2/projects/${{ secrets.LOKALISE_PROJECT_ID }}/translations?filter_lang_iso=$lang&filter_is_fuzzy=true&limit=1000" \
              -H "X-Api-Token: ${{ secrets.LOKALISE_API_TOKEN }}" | \
              jq -r '.translations | length')
            
            echo "$lang: $translated non-fuzzy + $fuzzy fuzzy = $total total translations"
            
            # Show some examples (including fuzzy)
            echo "Sample translations (including auto-translated):"
            curl -s -X GET \
              "https://api.lokalise.com/api2/projects/${{ secrets.LOKALISE_PROJECT_ID }}/translations?filter_lang_iso=$lang&limit=3" \
              -H "X-Api-Token: ${{ secrets.LOKALISE_API_TOKEN }}" | \
              jq -r '.translations[]? | "- \(.translation) (fuzzy: \(.is_fuzzy))"'
          done

      - name: Step 4.5 - Debug file structure before pull
        run: |
          echo "=== Current file structure ==="
          ls -la src/locales/ || echo "src/locales directory doesn't exist"
          echo ""
          echo "=== Testing Lokalise CLI download manually ==="
          curl -sSL https://raw.githubusercontent.com/lokalise/lokalise-cli-2-go/master/install.sh | sh
          ./bin/lokalise2 file download \
            --token ${{ secrets.LOKALISE_API_TOKEN }} \
            --project-id ${{ secrets.LOKALISE_PROJECT_ID }} \
            --format json \
            --unzip-to ./test-download \
            --include-description=false \
            --export-empty-as skip
          
          echo "=== Downloaded files ==="
          find ./test-download -name "*.json" -exec echo "File: {}" \; -exec head -3 {} \;

      - name: Step 5 - Pull translations back to GitHub
        uses: lokalise/lokalise-pull-action@v3.9.0
        with:
          api_token: ${{ secrets.LOKALISE_API_TOKEN }}
          project_id: ${{ secrets.LOKALISE_PROJECT_ID }}
          translations_path: src/locales
          base_lang: en
          file_format: json
          flat_naming: true
          skip_include_tags: true
          always_pull_base: false
          # Include fuzzy (auto-translated) content and force pull
          additional_params: "--indentation=4sp --export-empty-as skip --original-filenames=true"

      - name: Step 5.5 - Check what changed after pull
        run: |
          echo "=== Files after pull ==="
          ls -la src/locales/
          echo ""
          echo "=== Git status after pull ==="
          git status
          echo ""
          echo "=== Git diff after pull ==="
          git diff --name-only || echo "No differences found"
          git diff src/locales/ || echo "No changes in src/locales/"

      - name: Step 6 - Summary
        run: |
          echo "=== Workflow Complete ==="
          echo "✅ Target languages added to Lokalise"
          echo "✅ Automation triggered for untranslated keys"
          echo "✅ Waited for translations to complete"
          echo "✅ Pulled translations back to GitHub"
          echo ""
          echo "If a PR was created, review and merge it to get translations in your main branch."
          echo "If no PR was created, either no new translations were found or automation didn't complete."
